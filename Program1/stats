#!/bin/bash
#####
# CS 344 Fall 2017 Program 1 stats
# (Craig) Allan Reitan
# use: stats {-rows | -cols} [Input File Name]
# 9/25/2017
#####

# First, we test whether bash supports arrays.
# (Support for arrays was only added recently.)
#
whotest[0]='test' || (echo 'Failure: arrays not supported in this version of bash.' && exit 2)

#capturing the initial commandline parameters for later us in process control and file access.
d=$(echo $1 | cut -c -2)
f=$2

# Setup trap for SIGINT
trap "cleanup; exit 0" SIGINT
cleanup ()
{
	if [[ -e userData ]]; then
		rm -f userData
	fi
	if [[ -e DataStack* ]]; then
		rm -f DataStack*
	fi
}

# Check for correct amount of paramters
if [[ $# < 1 || $# > 2 ]]; then
	echo "$0: COMMAND LINE ERROR Number of Arguments- Usage: stats {-rows|-cols} [file]" 1>&2
	exit 1
# Checking directional parameter to make sure that a valid option was picked.  Displaying message and exiting with error.
elif [[ $d != "-r" && $d != "-c" ]]; then
    echo "$0: COMMAND LINE ERROR Rows or Columns- Usage: stats {-rows|-cols} [file]" 1>&2
    exit 1
fi

#Checking to see if the file name provided is readable or if it does NOT exist before proceeding.  Displaying message and exiting with error.
if [[ (! -r "$f" || ! -e "$f") && $# == 2 ]]; then
    echo "$0: COMMAND LINE ERROR File Access - Cannot Read or Locate $f" 1>&2
    exit 1
fi

# Initialize the variables that I plan to use with the loops and calculations
# index: will count the iteration number through the primary loop.
# elements & lines: parses the userData for the input for calculating 
# Rowcount & Colcount: will hold the count of Rows and Columns in the Dataset (Zero Based)
# Colindex: used to iterate through the columns in the rows.
# number: a holding variable if a value is read out of file or filtered out of some other data source.
# k: variable used to capture a constant/integer value if required.
# avg: calulcate the average for a data set
# median: calculate or derive the median value for data set
# These are declared for planning purpose, may not actually be implemented if a better alogrithm can be found.
# avgList: Accumulate series of avg calculations for output to another location.
# medianList: Accumulate series of medians calculations for output to another location.
index=0; 
Rowcount=1; Colcount=1; 
Colindex=1;
declare -a number
k=0
avg=0; avgList=''
median=0; medianList=''
userInput='';

# Setup a file to collect the Users data regardless of source input.
cleanup
touch userData

# Get manual input from user
if [[ $# == 1 ]]; then
	echo "Use 'D' to proceed with calculations"

	while [[ $userInput != *"D" ]]; do
		read -r -p "Input a row of the DATA Set: " userInput

		if [[ $userInput != *"D" ]]; then
		#echo "$userInput" >> userInput_Row$Rowcount
		echo "$userInput" >> userData
		fi
	done
	# While loop will run One more time than necessary to reach exit point
	# Backing off last iteration in the Rowcount
else
	# process the input file for the lines of data
	Rowcount=$(wc -l < $f)

	index=1;
	until [[ $index > $Rowcount ]]; do
		head -n $index $f | tail -n 1 >> userData
		((index++))
	done
fi

# At this point in the script the user input should be processed into one consistent userData file regardless of which input method they used.
# Get Row Count from line count of userData
Rowcount=$(wc -l < userData)
# Get Column Count from word count of first row of data, problem requirements said we could assume uniform width of dataset.
Colcount=$(head -n 1 userData | wc -w)

#DEBUG
echo "Rowcount = $Rowcount"
echo "Colcount = $Colcount"

# Prepare Output
# Run the calculation processes on the prepared data.
index=1
if [[ $d == -r* ]]; then
# Prepare Output
echo "Average Median"

# Process Rows
	until [[ $index > $Rowcount ]];do
		Colindex=1; avg=0;

		# Reading a line into an array for processing
		head -n $index userData | tail -n1 >> DataStackRow

		# Reading a line into an array for processing
		read -es -a number<DataStackRow

		# Loop and stack the data for later sorting
		for j in "${number[@]}"; do
			echo "$j" >> DataStack

			# Just accumulate the values as a SUM while in the loop.
			avg=$(expr $avg + $j)
		done

		#Calculate the true average of the values by dividing by the Column Count
		avg=$(($avg+$Colcount/2))
		avg=$(($avg / $Colcount))

		# Use sort to prep for finding the middle of the list of numbers
		sort -n DataStack > DataStackSorted
		k=$((($Colcount+1)/2))
		median=$(head -n$k DataStackSorted | tail -n1)

		#Render the row of output
		echo "$avg $median"

		# Cleanup and prepare for the next iteration of the loop.
		rm -f DataStack*
		((index++))
	done

elif [[ $d == -c* ]]; then
# Process Columns
	Colindex=1
	until [[ $Colindex > $Colcount ]]; do
		# Step through each row cutting the value out of column Colindex (allowing for the space between the values)
		# drop the values into a ColData file to be rapidly processed at the end.

		#Reset the Index loop iterator for this next run
		$index=1

		until [[ $index > $Rowcount ]];do
			#Using cut and indexing over by the Column Count Plus Index-1 to allow for the spaces in the data.
			number[$index-1]=$(head -n $index userData | tail -n1) | cut -c $(expr $Colindex + $index - 1)
			echo number[$index-1] >> DataStack
			avg=$(expr $avg + number[$index-1])
			((index++))
		done
		# Process the DataStack file
		# Use sort to prep for finding the middle of the list of numbers
		sort -n DataStack > DataStackSorted
		median=head -n $(expr \($Rowcount + \($Rowcount/2\)\) / $Rowcount) DataStackSorted | tail -n1

		# Begin stacking up the strings that will be the output values to display.
		avgList=$(echo "$avgList $avg")
		medianList=$(echo "$medianList $median")

		#DEBUG
		echo "avgList = $avgList"
		echo "medianList = $medianList"

		cat DataStack
		rm -f DataStack
		((Colindex++))
	done

# Render Output
echo "Averages: \n$avgList\nMedians:\n$medianList\n"

else
	echo "ERROR - Nothing was processed on the input."
	#cleanup
	exit 1
fi

#cleanup
exit 0