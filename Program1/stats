#!/bin/bash
#####
# CS 344 Fall 2017 Program 1 stats
# (Craig) Allan Reitan
# use: stats {-rows | -cols} [Input File Name]
# 9/25/2017
#####

#capturing the initial commandline parameters for later us in process control and file access.
d=$(echo $1 | cut -c -2)
f=$2

#DEBUG

# Check for correct amount of paramters
if [[ $# < 1 || $# > 2 ]]; then
	echo "$0: COMMAND LINE ERROR Number of Arguments- Usage: stats {-rows|-cols} [file]" 1>&2
	exit 1
# Checking directional parameter to make sure that a valid option was picked.  Displaying message and exiting with error.
elif [[ $d != "-r" && $d != "-c" ]]; then
    echo "$0: COMMAND LINE ERROR Rows or Columns- Usage: stats {-rows|-cols} [file]" 1>&2
    exit 1
fi

#Checking to see if the file name provided is readable or if it does NOT exist before proceeding.  Displaying message and exiting with error.
if [[ (! -r "$f" || ! -e "$f") && $# == 2 ]]; then
    echo "$0: COMMAND LINE ERROR File Access - Cannot Read or Locate $f" 1>&2
    exit 1
fi

# Initialize the variables that I plan to use with the loops and calculations
# index: will count the iteration number through the primary loop.
# elements & lines: parses the userData for the input for calculating 
# Rowcount & Colcount: will hold the count of Rows and Columns in the Dataset (Zero Based)
# number: a holding variable if a value is read out of file or filtered out of some other data source
# avg: calulcate the average for a data set
# median: calculate or derive the median value for data set
# These are declared for planning purpose, may not actually be implemented if a better alogrithm can be found.
# avgList: Accumulate series of avg calculations for output to another location.
# medianList: Accumulate series of medians calculations for output to another location.
index=0;
Rowcount=1; Colcount=1;
number=0
avg=0; avgList=0
median=0; medianList=0
userInput='';

# Setup a file to collect the Users data regardless of source input.
if [[ -e userData ]]; then
	rm -f userData
fi
touch userData

# Get manual input from user
if [[ $# == 1 ]]; then
	echo "Use 'D' to proceed with calculations"

	while [[ $userInput != *"D" ]]; do
		read -r -p "Input a row of the DATA Set: " userInput

		if [[ $userInput != *"D" ]]; then
		#echo "$userInput" >> userInput_Row$Rowcount
		echo "$userInput" >> userData
		fi
	done
	# While loop will run One more time than necessary to reach exit point
	# Backing off last iteration in the Rowcount
else
	# process the input file for the lines of data
	Rowcount=$(wc -l < $f)

	index=1;
	until [[ $index > $Rowcount ]]; do
		head -n $index $f | tail -n 1 >> userData
		((index++))
	done
fi

# At this point in the script the user input should be processed into one consistent userData file regardless of which input method they used.
# The next steps will transform them into Column Sets for processing, if required

# Process by Rows
if [[ $d == -c* ]]; then
	echo "Got a c"
	# Transform the data from rows into cols

fi

# Get Row Count from line count of userData
Rowcount=$(wc -l < userData)
# Get Column Count from word count of first row of data, problem requirements said we could assume uniform width of dataset.
Colcount=$(head -n 1 userData | wc -w)

#DEBUG
echo "Rowcount = $Rowcount"
echo "Colcount = $Colcount"

# Prepare Output
echo "Average Median"

# Run the calculation processes on the prepared data.
index=1
until [[ $index -gt $Rowcount ]];do

	((index++))
done



# rm userData
# Trapping in case of the Ctrl - C exit
trap "rm -f userData; exit 1" INT